{"title":"kaggle 泰坦尼克号生存预测","uid":"bc774fdd11fa6d051ebe88dab8157d32","slug":"kaggle 泰坦尼克号生存预测","date":"2024-01-15T12:17:05.000Z","updated":"2024-01-15T12:18:24.489Z","comments":true,"path":"api/articles/kaggle 泰坦尼克号生存预测.json","keywords":null,"cover":[],"content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>使用泰坦尼克号乘客数据（名字，年龄，票价等）预测谁将存活或者死去。</p>\n<h2 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h2><p>在数据中有三份文件：(1) <strong>train.csv</strong>, (2) <strong>test.csv</strong>, and (3) <strong>gender_submission.csv</strong>.</p>\n<h3 id=\"1-train-csv\"><a href=\"#1-train-csv\" class=\"headerlink\" title=\"(1) train.csv\"></a>(1) train.csv</h3><p><strong>train.csv</strong> 包含机上乘客子集的详细信息（确切地说是891名乘客——每个乘客在表中都有不同的一行。</p>\n<p>第二列中的值（ <strong>“幸存”</strong> ）可用于确定每个乘客是否幸存：</p>\n<ul>\n<li>如果是“1”，乘客就活了下来。</li>\n<li>如果是“0”，则乘客死亡。</li>\n</ul>\n<p>例如，<strong>train.csv</strong> 中列出的第一位乘客是 Owen Harris Braund 先生。他在泰坦尼克号上去世时22岁。</p>\n<h3 id=\"2-test-csv\"><a href=\"#2-test-csv\" class=\"headerlink\" title=\"(2) test.csv\"></a>(2) test.csv</h3><p>使用您在 <strong>train.csv</strong> 中训练的模型，预测船上其他418名乘客（在 <strong>test.csv</strong> 中）是否幸存。</p>\n<h3 id=\"3-gender-submission-csv\"><a href=\"#3-gender-submission-csv\" class=\"headerlink\" title=\"(3) gender_submission.csv\"></a>(3) gender_submission.csv</h3><p>提供了<strong>gender_submition.csv</strong>文件作为示例，该文件显示了您应该如何构建预测。据预测，所有女性乘客幸存，所有男性乘客死亡。你关于生存的假设可能会有所不同，这将导致不同的提交文件。但是，就像这个文件一样，您提交的文件应该有：</p>\n<ul>\n<li><strong>PassengerId&quot;；</strong> 列，其中包含<strong>test.csv</strong>中每个乘客的ID。</li>\n<li><strong>幸存的&quot;；</strong> 列（您将创建！），其中“1”表示您认为乘客幸存的行，“0”表示您预测乘客死亡的行。</li>\n</ul>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>导入所需要的库和训练集：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\">train_data = pd.read_csv(<span class=\"string\">&#x27;data/titanic/train.csv&#x27;</span>)</span><br><span class=\"line\">train_data.head()</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<ul>\n<li>导入测试集：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_data = pd.read_csv(<span class=\"string\">&#x27;data/titanic/train.csv&#x27;</span>)</span><br><span class=\"line\">train_data.head()</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<ul>\n<li>男性存活率：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">men = train_data.loc[train_data.Sex == <span class=\"string\">&#x27;male&#x27;</span>][<span class=\"string\">&quot;Survived&quot;</span>]</span><br><span class=\"line\">rate_men = <span class=\"built_in\">sum</span>(men)/<span class=\"built_in\">len</span>(men)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;% of men who survived:&quot;</span>, rate_men)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<blockquote>\n<p>% of men who survived: 0.18890814558058924</p>\n</blockquote>\n<ul>\n<li>在有兄弟姐妹的男性中，男性的存活率：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">men_sibsb_survived = train_data.loc[(train_data[<span class=\"string\">&#x27;Sex&#x27;</span>] == <span class=\"string\">&#x27;male&#x27;</span>) &amp; (train_data[<span class=\"string\">&#x27;SibSp&#x27;</span>] == <span class=\"number\">1</span>), <span class=\"string\">&#x27;Survived&#x27;</span>]</span><br><span class=\"line\">men = train_data.loc[(train_data.Sex == <span class=\"string\">&#x27;male&#x27;</span>) &amp; (train_data[<span class=\"string\">&#x27;SibSp&#x27;</span>] == <span class=\"number\">1</span>)][<span class=\"string\">&quot;Survived&quot;</span>]</span><br><span class=\"line\">men_sibsb = <span class=\"built_in\">sum</span>(men_sibsb_survived)/<span class=\"built_in\">len</span>(men)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;有兄弟姐妹的男性中，男性存活率&quot;</span>, men_sibsb)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<blockquote>\n<p>有兄弟姐妹的男性中，男性存活率： 0.3106796116504854</p>\n</blockquote>\n<ul>\n<li>在有父母和孩子的男性中，男性存活率：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">men_parch_survived = train_data.loc[(train_data[<span class=\"string\">&#x27;Sex&#x27;</span>] == <span class=\"string\">&#x27;male&#x27;</span>) &amp; (train_data[<span class=\"string\">&#x27;Parch&#x27;</span>] == <span class=\"number\">1</span>), <span class=\"string\">&#x27;Survived&#x27;</span>]</span><br><span class=\"line\">men = train_data.loc[(train_data.Sex == <span class=\"string\">&#x27;male&#x27;</span>) &amp; (train_data[<span class=\"string\">&#x27;Parch&#x27;</span>] == <span class=\"number\">1</span>)][<span class=\"string\">&quot;Survived&quot;</span>]</span><br><span class=\"line\">men_parch = <span class=\"built_in\">sum</span>(men_sibsb_survived)/<span class=\"built_in\">len</span>(men)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;有父母孩子的男性中，男性存活率：&quot;</span>, men_parch)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<blockquote>\n<p>有父母孩子的男性中，男性存活率： 0.5517241379310345</p>\n</blockquote>\n<ul>\n<li>女性存活率：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">women = train_data.loc[train_data.Sex == <span class=\"string\">&#x27;female&#x27;</span>][<span class=\"string\">&quot;Survived&quot;</span>]</span><br><span class=\"line\">rate_women = <span class=\"built_in\">sum</span>(women)/<span class=\"built_in\">len</span>(women)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;% of women who survived:&quot;</span>, rate_women)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<blockquote>\n<p>% of women who survived: 0.7420382165605095</p>\n</blockquote>\n<ul>\n<li>使用随机森林模型对结果进行预测，选用的特征是船票等级，性别，是否有配偶在船上，是否有父母在船上。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestClassifier</span><br><span class=\"line\"></span><br><span class=\"line\">y = train_data[<span class=\"string\">&quot;Survived&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">features = [<span class=\"string\">&quot;Pclass&quot;</span>, <span class=\"string\">&quot;Sex&quot;</span>, <span class=\"string\">&quot;SibSp&quot;</span>, <span class=\"string\">&quot;Parch&quot;</span>]</span><br><span class=\"line\">X = pd.get_dummies(train_data[features])</span><br><span class=\"line\">X_test = pd.get_dummies(test_data[features])</span><br><span class=\"line\"></span><br><span class=\"line\">model = RandomForestClassifier(n_estimators=<span class=\"number\">100</span>, max_depth=<span class=\"number\">5</span>, random_state=<span class=\"number\">1</span>)</span><br><span class=\"line\">model.fit(X, y)</span><br><span class=\"line\">predictions = model.predict(X_test)</span><br><span class=\"line\"></span><br><span class=\"line\">output = pd.DataFrame(&#123;<span class=\"string\">&#x27;PassengerId&#x27;</span>: test_data.PassengerId, <span class=\"string\">&#x27;Survived&#x27;</span>: predictions&#125;)</span><br><span class=\"line\">output.to_csv(<span class=\"string\">&#x27;submission.csv&#x27;</span>, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Your submission was successfully saved!&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>准确率计算：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"></span><br><span class=\"line\">true_data = pd.read_csv(<span class=\"string\">&#x27;data/titanic/gender_submission.csv&#x27;</span>)</span><br><span class=\"line\">y_true = true_data.Survived</span><br><span class=\"line\">y_pred = predictions</span><br><span class=\"line\"><span class=\"comment\"># 计算准确率</span></span><br><span class=\"line\">accuracy = accuracy_score(y_true, y_pred)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Accuracy: <span class=\"subst\">&#123;accuracy&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<blockquote>\n<p><code>Accuracy: 0.9712918660287081</code></p>\n</blockquote>\n<h3 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h3><h4 id=\"随机森林模型\"><a href=\"#随机森林模型\" class=\"headerlink\" title=\"随机森林模型\"></a>随机森林模型</h4><p>随机森林模型在分类和回归任务上都有优秀的表现。但是如果要理解随机森林模型的具体原理，这对初学者来说颇具难度，这里面设计到了大量的数学运算，具体步骤参考最后的引文资料，本文尽量以最简单的概念来让你对其有一定的了解。</p>\n<p>假设你要判断一些戴着面具的孩子的性别，你可以对他们提出问题，根据他们的回答进行判断，你能提出问题只包括是否喜欢运动，是否喜欢电脑游戏，是否喜欢粉色，是否喜欢甜食等等。</p>\n<p>为了使你需要提问的次数最少，判断更准确，那么你需要准备好合适的问题和问题的次序。</p>\n<p>在正式的测试前，允许你先刷一会的题。这就对应了模型中训练的过程。</p>\n<p>首先，你找来100个人，其中有50个男生和50个女生站在一起，你对他们喊道：喜欢甜食的站在左边，不喜欢的人站在右边。</p>\n<p>这时候70个人站在了左边，30个站在了右边。但是别高兴太早，你又发现70个中男生占一半，女生占一半，另外30个也是一样。</p>\n<p><img src=\"https://siyuan-lisx.oss-cn-shenzhen.aliyuncs.com/img/20240111214828.png\"></p>\n<p>那么看来，对于在吃甜食这一事件上，性别不同不会有什么特殊偏好，所以在分辨男女这件事上，是否喜欢甜食，不是一个<strong>好问题</strong>。</p>\n<p>所以你让男女生又站了回来，换把问题换成了是否喜欢打电脑游戏。</p>\n<p>这时候60个人站在了左边，40个站在了右边，但是60个人之中有40个是男生，20个是女生，那么40个中30个是女生，10个是男生。</p>\n<p><img src=\"https://siyuan-lisx.oss-cn-shenzhen.aliyuncs.com/img/202401112150064.png\"></p>\n<p>很明显，在左边里面，男生的比例明显增加，在右边里面，女生比例明显增加。</p>\n<p>所以在是否喜欢玩电脑游戏这个问题，有效区分这个人是男生和女生，所以这是一个好问题。</p>\n<p>当然，你希望准确率可以更高一些，那么你可以对左边右边继续问问题，左右边可以是相同的问题，也可以是不同问题。</p>\n<p>知道最后不断划分，你就可以通过一系列问题判断出这个人大概率是男生还是女生，这时候这系列问题被称为<strong>树</strong>。</p>\n<p>但是不要忘了，这是随机森林模型，一棵树怎么可以称之为森林呢。但是你可以重复上述步骤，从人群中选择不同样本集合，选择不同问题训练出不同的树。</p>\n<p>不同树可能对同一个样本给出不同答案，这时候我们应该相信哪棵树的答案?</p>\n<p>投票，哪个答案给出的多，那我们就信哪个答案。</p>\n<p><img src=\"https://siyuan-lisx.oss-cn-shenzhen.aliyuncs.com/img/20240111212014.png\" title=\"Kaggle官方原理图\"></p>\n<p>那再实际的随机森林模型中，对于问题的选择，通常采用信息增益、增益率或者基尼指数对所选参量进行判断，在选择一个参量后，群体分支几个部分，每个部分中某一类数量占比特别高，其它类别总占比小，我们就称这个参量的信息增益大，可以看看上面我给你举的例子，不同问题代表不同参量，好的参量最后造成了左右队列中男女比例明显的变化。</p>\n<p>同时，为了防止过拟合，还需要对模型进行剪支处理。这些概念具体请看我后面给你的参考文献。</p>\n<p>以上，就是我对随机森林模型粗浅的了解，欢迎各位的指正。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"https://www.kaggle.com/competitions/titanic\">Titanic - Machine Learning from Disaster | Kaggle</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/471494060\">随机森林详解（从决策树理解随机森林） - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://github.com/datawhalechina/pumpkin-book\">datawhalechina&#x2F;pumpkin-book: 《机器学习》（西瓜书）公式详解 (github.com)</a></li>\n<li><a href=\"https://product.dangdang.com/29579286.html\">《机器学习公式详解第2版 周志华西瓜书《机器学习》伴侣书南瓜书新版上市！了解人工智能ChatGpt底层数学逻辑！》(谢文睿)【简介_书评_在线阅读】 - 当当图书 (dangdang.com)</a></li>\n</ol>\n","text":"目标使用泰坦尼克号乘客数据（名字，年龄，票价等）预测谁将存活或者死去。 数据在数据中有三份文件：(1) train.csv, (2) test.csv, and...","permalink":"/post/kaggle 泰坦尼克号生存预测","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">目标</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-train-csv\"><span class=\"toc-text\">(1) train.csv</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-test-csv\"><span class=\"toc-text\">(2) test.csv</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-gender-submission-csv\"><span class=\"toc-text\">(3) gender_submission.csv</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">随机森林模型</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献</span></a></li></ol>","author":{"name":"wiselisx","slug":"blog-author","avatar":"https://siyuan-lisx.oss-cn-shenzhen.aliyuncs.com/img/202401112211814.jpg","link":"/","description":"一个无聊的人没事时候的碎碎念","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2024-01-13T14:08:17.376Z","updated":"2024-01-13T14:07:53.161Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info...","permalink":"/post/hello-world","photos":[],"count_time":{"symbolsCount":444,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"wiselisx","slug":"blog-author","avatar":"https://siyuan-lisx.oss-cn-shenzhen.aliyuncs.com/img/202401112211814.jpg","link":"/","description":"一个无聊的人没事时候的碎碎念","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}